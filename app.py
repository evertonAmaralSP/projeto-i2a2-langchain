import streamlit as st
import pandas as pd
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import create_react_agent
from langchain.agents import AgentExecutor
from ferramentas import criar_ferramentas

import os

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

    
st.set_page_config(page_title="Assistente de an√°lise de dados com IA", layout="centered")
st.title("ü¶ú Assistente de an√°lise de dados com IA")

# Descri√ß√£o da ferramenta
st.info("""
Este assistente utiliza um agente, criado com Langchain, para te ajudar a explorar, analisar e visualizar dados de forma interativa. Basta fazer o upload de um arquivo CSV.
""")

# Upload do CSV
st.markdown("### üìÅ Fa√ßa upload do seu arquivo CSV")
arquivo_carregado = st.file_uploader("Selecione um arquivo CSV", type="csv", label_visibility="collapsed")

if arquivo_carregado:
    df = pd.read_csv(arquivo_carregado)
    st.success("Arquivo carregado com sucesso!")
    st.markdown("### Primeiras linhas do DataFrame")
    st.dataframe(df.head())

    # LLM


    llm = ChatOpenAI(
        model="gpt-4o",
        temperature=0.1,
        openai_api_key=OPENAI_API_KEY
    )

    # Ferramentas
    tools = criar_ferramentas(df)

    # Prompt react
    df_head = df.head().to_markdown()

    prompt_react_pt = PromptTemplate(
        input_variables=["input", "agent_scratchpad", "tools", "tool_names"],
        partial_variables={"df_head": df_head},
        template="""
        Voc√™ √© um assistente que sempre responde em portugu√™s.

        Voc√™ tem acesso a um dataframe pandas chamado `df`.
        Aqui est√£o as primeiras linhas do DataFrame, obtidas com `df.head().to_markdown()`:

        {df_head}

        Responda √†s seguintes perguntas da melhor forma poss√≠vel.

        Para isso, voc√™ tem acesso √†s seguintes ferramentas:

        {tools}

        Use o seguinte formato:

        Question: a pergunta de entrada que voc√™ deve responder  
        Thought: voc√™ deve sempre pensar no que fazer  
        Action: a a√ß√£o a ser tomada, deve ser uma das [{tool_names}]  
        Action Input: a entrada para a a√ß√£o  
        Observation: o resultado da a√ß√£o  
        ... (este Thought/Action/Action Input/Observation pode se repetir N vezes)
        Thought: Agora eu sei a resposta final  
        Final Answer: a resposta final para a pergunta de entrada original.
        Quando usar a ferramenta_python: formate sua resposta final de forma clara, em lista, com valores separados por v√≠rgulas e duas casas decimais sempre que apresentar n√∫meros.

        Comece!

        Question: {input}  
        Thought: {agent_scratchpad}"""
    )

    
    # Agente
    agente = create_react_agent(llm=llm, tools=tools, prompt=prompt_react_pt)
    orquestrador = AgentExecutor(agent=agente,
                                tools=tools,
                                verbose=True,
                                handle_parsing_errors=True)

    # A√á√ïES R√ÅPIDAS
    st.markdown("---")
    st.markdown("## ‚ö° A√ß√µes r√°pidas")

    # Relat√≥rio de informa√ß√µes gerais
    if st.button("üìÑ Relat√≥rio de informa√ß√µes gerais", key="botao_relatorio_geral"):
        with st.spinner("Gerando relat√≥rio ü¶ú"):
            resposta = orquestrador.invoke({"input": "Quero um relat√≥rio com informa√ß√µes sobre os dados"})
            st.session_state['relatorio_geral'] = resposta["output"]

    # Exibe o relat√≥rio com bot√£o de download
    if 'relatorio_geral' in st.session_state:
        with st.expander("Resultado: Relat√≥rio de informa√ß√µes gerais"):
            st.markdown(st.session_state['relatorio_geral'])

            st.download_button(
                label="üì• Baixar relat√≥rio",
                data=st.session_state['relatorio_geral'],
                file_name="relatorio_informacoes_gerais.md",
                mime="text/markdown"
            )

    # Relat√≥rio de estat√≠sticas descritivas
    if st.button("üìÑ Relat√≥rio de estat√≠sticas descritivas", key="botao_relatorio_estatisticas"):
        with st.spinner("Gerando relat√≥rio ü¶ú"):
            resposta = orquestrador.invoke({"input": "Quero um relat√≥rio de estat√≠sticas descritivas"})
            st.session_state['relatorio_estatisticas'] = resposta["output"]

    # Exibe o relat√≥rio salvo com op√ß√£o de download
    if 'relatorio_estatisticas' in st.session_state:
        with st.expander("Resultado: Relat√≥rio de estat√≠sticas descritivas"):
            st.markdown(st.session_state['relatorio_estatisticas'])

            st.download_button(
                label="üì• Baixar relat√≥rio",
                data=st.session_state['relatorio_estatisticas'],
                file_name="relatorio_estatisticas_descritivas.md",
                mime="text/markdown"  
            )
   
   # PERGUNTA SOBRE OS DADOS
    st.markdown("---")
    st.markdown("## üîé Perguntas sobre os dados")
    pergunta_sobre_dados = st.text_input("Fa√ßa uma pergunta sobre os dados (ex: 'Qual √© a m√©dia do tempo de entrega?')")
    if st.button("Responder pergunta", key="responder_pergunta_dados"):
        with st.spinner("Analisando os dados ü¶ú"):
            resposta = orquestrador.invoke({"input": pergunta_sobre_dados})
            st.markdown((resposta["output"]))


    # GERA√á√ÉO DE GR√ÅFICOS
    st.markdown("---")
    st.markdown("## üìä Criar gr√°fico com base em uma pergunta")

    pergunta_grafico = st.text_input("Digite o que deseja visualizar (ex: 'Crie um gr√°fico da m√©dia de tempo de entrega por clima.')")
    if st.button("Gerar gr√°fico", key="gerar_grafico"):
        with st.spinner("Gerando o gr√°fico ü¶ú"):
            orquestrador.invoke({"input": pergunta_grafico})
